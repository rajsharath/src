import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.InputStreamReader;

/**
 * TODO: Insert description here. (generated by srallabandi)
 */
public class MedianGame {

	MinHeap minHeap = new MinHeap();
	MaxHeap maxHeap = new MaxHeap();
	int[] median = new int[10000];
	int medianIndex = 0;

	public void findMedian(int[] arr) throws Exception {
		minHeap.insert(arr[0]);
		median[medianIndex] = (arr[0]);
		medianIndex++;
		for (int x = 1; x < arr.length; x++) {
			int num = arr[x];
			addToCorrectHeap(num);
			balanceHeapSizes();
			if (maxHeap.size() >= minHeap.size()) {
				median[medianIndex] = maxHeap.getMax();
			} else {
				median[medianIndex] = minHeap.getMin();
			}
			medianIndex++;
		}
	}

	private void balanceHeapSizes() throws Exception {
		if (Math.abs(minHeap.size() - maxHeap.size()) <= 1) {
			return;
		}
		if (minHeap.size() > maxHeap.size()) {
			int num = minHeap.remove();
			maxHeap.insert(num);
		} else {
			int num = maxHeap.remove();
			minHeap.insert(num);
		}

	}

	private void addToCorrectHeap2(int num) throws Exception {
		if (num < maxHeap.getMax()) {
			maxHeap.insert(num);
		} else {
			minHeap.insert(num);
		}
	}

	private void addToCorrectHeap(int num) throws Exception {
		if (maxHeap.size() == 0) {
			minHeap.insert(num);
			return;
		}
		if (minHeap.size() == 0) {
			maxHeap.insert(num);
			return;
		}
		if (num < maxHeap.getMax()) {
			maxHeap.insert(num);
		} else {
			minHeap.insert(num);
		}
	}

	private static int[] readFile() {
		int num[] = new int[10000];
		int  i = 0;
		try {
			FileInputStream fstream = new FileInputStream("c:\\Median.txt");
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String strLine;
			while ((strLine = br.readLine()) != null) {
				num[i] = new Integer(strLine);
				i++;
			}
			in.close();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}
		return num;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		//int[] arr = { 5, 10, 4, 3, 19, 1 };
		int arr[] = readFile();
		try {
			MedianGame game = new MedianGame();
			game.findMedian(arr);
			int sum = 0;
			for (int i = 0; i < game.median.length; i++) {
				sum += game.median[i];
			}
			System.out.println(sum % 10000);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}