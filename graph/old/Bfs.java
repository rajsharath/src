package graph.old;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * TODO: Insert description here. (generated by srallabandi)
 */
public class Bfs {
  
  public static void bfs(Graph g, Integer source) {
    Map<Integer, Boolean> visited = new HashMap<Integer, Boolean>();
    Queue<Integer> queue = new PriorityQueue<Integer>();
    queue.add(source);
    System.out.println(source);
    visited.put(source, true);
    while (!queue.isEmpty()) {
      int current = queue.poll();
      List<Edge> edges = g.vertices.get(current);
      for (Edge edge : edges) {
        if (edge.start == current) {
          if (!visited.containsKey(edge.end)) {
            queue.add(edge.end);
            visited.put(edge.end, true);
            System.out.println(edge.end);
          }
        } else {
          if (!visited.containsKey(edge.start)) {
            queue.add(edge.start);
            visited.put(edge.start, true);
            System.out.println(edge.start);
          }
        }
      }
    }
  }
  
  public static void bfs2(graph.old.GraphOld g, Integer source) {
    Map<Integer, Boolean> visited = new HashMap<Integer, Boolean>();
    Queue<Integer> queue = new LinkedList<Integer>();
    queue.add(source);
    System.out.println(source);
    visited.put(source, true);
    int distance = 0;
    while (!queue.isEmpty()) {    
      int current = queue.remove();
      List<Integer> childVertices = g.adj[current];
  	  distance ++;
      for (Integer childVertex : childVertices) {
          if (!visited.containsKey(childVertex)) {
            queue.add(childVertex);
            visited.put(childVertex, true);
            System.out.println(childVertex + " distance " + distance);
        }
      }
    }
  }
  
  public static Graph createGraph() {
    List<List<Edge>> vertices = new ArrayList<List<Edge>>();
    List<Edge> edges = new ArrayList<Edge>();
    return new Graph(vertices, edges); 
  }
  
  private static class Graph{
    List<List<Edge>> vertices;
    List<Edge> edges;
    
    public Graph(List<List<Edge>> vertices, List<Edge> edges) {
      this.vertices = vertices;
      this.edges = edges;
    }    
  }
  
  private static class Edge {
    int start;
    int end;
    int weight;
    
    public Edge(int weight, int start, int end) {
      this.weight = weight;
      this.start = start;
      this.end = end;
    }
  }

  /**
   * @param args
   */
  public static void main(String[] args) {
    bfs2(new graph.old.GraphOld(), 0);

  }

}
